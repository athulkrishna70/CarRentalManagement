@page "/vehicles/"
@using CarRentalManagement.Client.Static;
@using CarRentalManagement.Shared.Domain;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.JSInterop;
@using System.Net.Http.Json;
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">vehicles</h3>
@if (Vehicles == null)
{
	<div class="alert alert-info">Loading vehicles...</div>
}
else
{
	<table class="table table-responsive">
		<thread>
			<tr>
				<th>Make</th>
				<th>Model</th>
				<th>Year</th>
				<th>License Plate Number</th>
				<th>Actions</th>
			</tr>
		</thread>
		<tbody>
			@foreach (var vehicle in Vehicles)
			{
				<tr>
					<td>@vehicle.make.Name</td>
					<td>@vehicle.model.Name</td>
					<td>@vehicle.year</td>
					<td>@vehicle.LicensePlateNumber </td>

				</tr>
			}
		</tbody>
	</table>
}
@code {
	private List<vehicle>? Vehicles;
	protected async override Task OnInitializedAsync()
	{
		Vehicles = await _client.GetFromJsonAsync<List<vehicle>>($"{Endpoints.VehiclesEndpoint}");
	}
	async Task Delete(int vehicleId)
	{
		if (Vehicles != null)
		{
			var vehicle = Vehicles.First(q => q.Id == vehicleId);
			var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete{vehicle.LicensePlateNumber}?");

			if (confirm)
			{
				await _client.DeleteAsync($"{Endpoints.MakesEndpoint}/{vehicleId}");
				await OnInitializedAsync();
			}
		}
	}
}
